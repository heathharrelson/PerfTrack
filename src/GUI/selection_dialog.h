//! \file selection_dialog.h
// John May, 28 October 2004
/*****************************************************************
* PerfTrack Version 1.0 (September 2005)
* 
* For information on PerfTrack, please contact John May
* (johnmay@llnl.gov) or Karen Karavanic (karavan@cs.pdx.edu).
* 
* See COPYRIGHT AND LICENSE information at the end of this file.
*
*****************************************************************/

#ifndef SELECTION_DIALOG_H
#define SELECTION_DIALOG_H

#include <qevent.h>
#include <qlabel.h>
#include <qlayout.h>
#include <q3listview.h>
#include <qlineedit.h>
#include <qmap.h>
#include <qpair.h>
#include <qstring.h>
#include <qstringlist.h>
#include <q3valuelist.h>
//Added by qt3to4:
#include <QShowEvent>

#include "constraint_list_item.h"
#include "data_access.h"
#include "selection_dialog_base.h"
#include "resource_selector.h"
#include "selection_list_item.h"
#include "resource_type_and_name.h"

class SelectionListItem;

//! Dialog for choosing resources to include in a focus.

//! This class uses the automatically generated selectionDialogBase
//! class generated by Qt designer and extends it to add functionality
//! needed for communicating with the database.  Users choose items
//! from a set of views to include in the database query, then pose
//! that query by pressing the Select button.
//class SelectionDialog : public SelectionDialogBase {
class SelectionDialog : public SelectionDialogBase {
	Q_OBJECT
public:
	SelectionDialog( DataAccess * da,
			QWidget * parent = 0, const char * name = 0,
			bool modal = FALSE, Qt::WFlags fl = 0 );
	~SelectionDialog();

	//! Build a list of resource ids for the selections.  This
	//! string list will contain one comma-separated list of
	//! resource ids corresponding to each item in the selection
	//! list.
	QStringList buildResourceIdList();

	//! Returns the number of resource types hierarchies that
	//! appear in the constraint list.
	int typeCount() const;

	//! Build a list of resource names corresponding to a focus.
	//! Returns a list of strings in which each resource type
	//! (or a descendant of it) in the focus framework is
	//! represented exactly once by an item from the selection
	//! list.  If no item for a given resource type is found,
	//! a warning is displayed and an empty list is returned.
	//! If there are multiple items of a given type (or of a
	//! related type), only the first one is used.  Any resources
	//! in the selection list that don't match a type in the
	//! focus framework are ignored.  Any items based on attribute
	//! selections are also ignored.
//	QStringList buildFocusList();

	//! Build a list of QString pairs containing the constraints.
	//! This is used by the main window to show the constraints
	//! that were used to generate a set of results.
	Q3ValueList<ResourceTypeAndName> buildConstraintList();

public slots:
	//! Receive information on user's resource selection. 
	//! \a resources is a comma-separated list of resource id
	//! numbers, which are used to conduct the search for matching
	//! data.  \a resourceType is the same as \a type if the
	//! constraint is a resource name.  If the constraint is an
	//! attribute/value pair, then \a resourceType is the type
	//! of the resource to which the attribute belongs.  At present
	//! \a resourceType is unused, since there's no distinction
	//! at this level between resources specified by name or by
	//! attribute: the \a resources id list tells us what we need to know.
	void addConstraint( QString type, QString value, QString resources,
			QString resourceType );

	//! Receive information on user's resource type selection.
	//! Unlike addConstraint(), the caller doesn't know the
	//! list of resource ids that correspond to this type, so
	//! we need to look that up here.
	void addResourceType( QString type );
	
	//! Sets all the resource lists to display their top-level
	//! items, with none selected.  All items with children are
	//! set to closed, but the children are not deleted.
	void resetLists();

	//! Remove selected items from the constraint list
	void deleteConstraints();

	//! Ugly hack used in searching by metrics
	QString metricIdList() const { return metricIds; }
        QStringList labelList() ;

protected slots:

	//! Set the count field in \a item by looking up the
	//! number of results for the relevant resources.
	void setItemCount( Q3ListViewItem * item, int col );

	//! Set the the count field in \a item to the \a count
	//! and compute and display the number of results mathing
	//! all items in the constraint list.
	void setCounts( ConstraintListItem * item, int count );

	//! Respond to a change of the relative selection by
	//! putting the right relatives in the db's list and
	//! resetting the item count.
	void setRelatives( Q3ListViewItem * item, int col );

        void labelSelected();
        void combineResultsSelected();
signals:
        void combineResults(bool);

protected:
	//! Set up the Qt signal/slot connections that respond to user
	//! interface and other events.
	void initConnections();

	//! Create a set of selection widgets for each resource type
	//! and put them in the dialog.
	void initSelectors();

	//! Populate the list of resources
	void setResourceTypes();

	//! Defines the relatives to be added or deleted by
	//! setItemRelatives() and deleteItemRelatives.  FromItem
	//! means the ancestors and descendants are determined from
	//! the relatives column in the item being examined.
	enum RelativeSet { Self = 1, Ancestors = 2, Descendants = 4, Both = 6,
		FromItem = 8 };

	//! Add relatives to the db's list according to the
	//! list item specifications.  \a addSelf specifies
	//! whether resources matching the specification itself
	//! should be added.  Returns the number of results that
	//! match the items added.
	int addItemRelatives( ConstraintListItem * item, int rel );

	//! Delete relatives from the db's list according to the
	//! list item specifications.  \a addSelf specifies
	//! whether resources matching the specification itself
	//! should be deleted.
	void deleteItemRelatives( ConstraintListItem * item,  int rel );

	//! Reimplement so we can get the latest list of resource
	//! types each time the dialog is displayed.
	virtual void showEvent( QShowEvent * );

	//! Build a list of QString pairs containing the resource templates
//	QValueList<ResourceTypeAndName> buildTemplateList();

	//! Build a list of QString pairs containing the display parameters
	Q3ValueList<QPair<QString,QString> > buildDisplayParameterList();

	//! Identify columns used in the constraint list view
	enum { RelCol = 0, TypeCol, ValueCol, CountCol, ResTypeCol, IDCol };
	
	Q3ValueList<QStringList> resourceTypes;
	DataAccess * dataSource;

	//! list of metric ids -- part of an Ugly hack
	QString metricIds;

	//! Internal list of the required resource types in a focus,
	//! in the canonical order.
//	static QStringList focusTypes;
};

#endif

/****************************************************************************
COPYRIGHT AND LICENSE
 
Copyright (c) 2005, Regents of the University of California and
Portland State University.  Produced at the Lawrence Livermore
National Laboratory and Portland State University.
UCRL-CODE-2005-155998
All rights reserved.
 
Redistribution and use in source and binary forms, with or
without modification, are permitted provided that the following
conditions are met:
 
* Redistributions of source code must retain the above copyright
notice, this list of conditions and the following disclaimer.
* Redistributions in binary form must reproduce the above copyright
notice, this list of conditions and the following disclaimer in
the documentation and/or other materials provided with the
distribution.
* Neither the name of the University of California
or Portland State Univeristy nor the names of its contributors
may be used to endorse or promote products derived from this
software without specific prior written permission.
 
THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND
CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS
BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED
TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
POSSIBILITY OF SUCH DAMAGE.

ACKNOWLEDGMENT

1. This notice is required to be provided under our contract with the U.S.
Department of Energy (DOE).  This work was produced at the University
of California, Lawrence Livermore National Laboratory under Contract
No. W-7405-ENG-48 with the DOE.

2. Neither the United States Government nor the University of California
nor any of their employees, makes any warranty, express or implied, or
assumes any liability or responsibility for the accuracy, completeness, or
usefulness of any information, apparatus, product, or process disclosed, or
represents that its use would not infringe privately-owned rights.

3.  Also, reference herein to any specific commercial products, process, or
services by trade name, trademark, manufacturer or otherwise does not
necessarily constitute or imply its endorsement, recommendation, or
favoring by the United States Government or the University of California.
The views and opinions of authors expressed herein do not necessarily
state or reflect those of the United States Government or the University of
California, and shall not be used for advertising or product endorsement
purposes. 
****************************************************************************/
